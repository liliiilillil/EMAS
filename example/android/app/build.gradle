boolean loadLocalBundle = System.properties.getProperty("LOAD_LOCAL_BUNDLE") == "1"
boolean ABI_FILTER = System.properties.getProperty("ABI_FILTER") == "1"
boolean ENV_SWITCH = System.properties.getProperty("ENV_SWITCH") == "1" // 网关环境切换开关
boolean ENV_CHECK = System.properties.getProperty("ENV_CHECK") == "1"  //APP 运行环境检测(网络判断、root判断)

apply plugin: "com.android.application"

/**
获取keystore配置信息。
1. 项目有默认keystore文件，具体见 ../keystores/default.keystore
2. 具体签名配置逻辑: 
    1.1: 每个项目都默认有一个keystore签名文件,即../keystore/default.keystore文件。该签名文件一般用于开发时使用
    1.2: 构建Android项目时，根据default.keystore签名信息在 android目录下生成keystore.properties签名配置信息。
    1.3: android/keystore.properties 签名配置是给开发人员在开发的时候使用，可根据本地开发需要随意修改。并能且不能提交。
    1.4: 如果执行Android构建命令时有 签名参数传入，则优先使用传入签名配置。如: ./gradlew assembleDebug -DDebugSignAlias=123 -DDebugSignKeyPwd=123 -DDebugSignStorePwd=123 -DDebugSignFile=./debug.keystore
3. default.keystore 一般默认作为debug签名文件。 生产签名信息一般由dice 构建的时候通过打包参数传递过来。
4. 如果项目不需要采用配置形式的签名，只需要修改本文件的 signingConfigs {} signingConfigs{} 将签名信息固定配置

Release keystore 签名逻辑: 通过模板工程创建的项目不提供release 签名文件。需要根据项目所需进行创建
1. 构建Android Release包 所需要的release签名信息 需要由移动开发平台进行签名证书配置.然后配置打包命令
   如：./gradlew assembleRelease -DReleaseSignAlias=123 -DReleaseSignKeyPwd=123 -DReleaseSignStorePwd=123 -DReleaseSignFile=./release.keystore
2. 如果构建时未传递签名信息，构建脚本同样也会采用默认构建签名文件 即： ../keystores/default.keystore 签名文件
3. 如果想固定 Release签名信息，可以通过一下两种方式进行操作:
    1. 修改下方 signingConfigs { release:{}} 中的配置信息.
    2. 修改../keystores/sign.gradle Release配置信息。具体参考../keystores/sign.gradle 文件。
*/
apply from:'../keystores/sign.gradle'
def signConfig = project.hasProperty("sign") ? project.sign : [];

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js",
    bundleInDebug: loadLocalBundle,
    enableHermes: true,
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

def enableHermes = project.ext.react.get("enableHermes", false);

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

def jscFlavor = 'org.webkit:android-jsc:+'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.trnwapptemplate"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled true
        manifestPlaceholders = [TERMINUS_ENV_TYPE_VALUE: "production","EMAS_APPKEY":"31233324","EMAS_APPSECRET":"58a7d81ace92556d2ad0726119236db5","EMAS_CHANNEL":"aaa"]
        versionCode 1
        versionName "0.0.1"
        ndk {
            if(ABI_FILTER) {
               abiFilters  "armeabi-v7a"
            }else{
               abiFilters "armeabi-v7a", "x86"
            }
        }
        buildConfigField "boolean" , "LOAD_LOCAL_BUNDLE", loadLocalBundle ? 'true' : 'false'
        buildConfigField "boolean" , "NEED_ENV_CHECK" , ENV_CHECK ? 'true' : 'false'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            if(ABI_FILTER) {
               include "armeabi-v7a"
            }else{
               include "armeabi-v7a", "x86"
            }
        }
    }
    aaptOptions {
       cruncherEnabled = false
    }
    signingConfigs {
        release {
            keyAlias signConfig.ReleaseSignAlias
            keyPassword signConfig.ReleaseSignKeyPwd
            storeFile file(signConfig.ReleaseSignFile)
            storePassword signConfig.ReleaseSignStorePwd
        }
        debug {
            keyAlias signConfig.DebugSignAlias
            keyPassword signConfig.DebugSignKeyPwd
            storeFile file(signConfig.DebugSignFile)
            storePassword signConfig.DebugSignStorePwd
        }
    }

    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            if(ENV_SWITCH) {
                buildConfigField 'int', 'env', '2'
            }else{
                buildConfigField 'int', 'env', '1'
            }
        }
        debug {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.debug
            buildConfigField 'int', 'env', '2'
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ABI_FILTER ? ["armeabi-v7a":1, "x86":2] : ["armeabi-v7a":1]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    dexOptions {
       preDexLibraries true
       javaMaxHeapSize "4g"
       dexInProcess = true
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation project(':react-native-screens')
    implementation project(':react-native-reanimated')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation ("com.facebook.react:react-native:0.61.5") { force = true } // From node_modules

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
    implementation project(':react-native-svg')
    implementation project(':rn-env')
    if(ENV_SWITCH) {
        implementation project(':rn-debug')
    }
    implementation project(':react-native-cookies')
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-screen-tool')
    implementation project(':react-native-community-netinfo')
    implementation project(':react-native-image-picker')
    implementation project(':react-native-webview')
    implementation project(':react-native-camera')
    implementation project(':react-native-emas')
    implementation 'androidx.appcompat:appcompat:1.1.0-rc01'
    implementation 'androidx.annotation:annotation:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0-beta04'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02'

}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}